<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1478823947637">{:repl-history {:ide [], :local [&quot;(do :one)&quot; &quot;(do :two)&quot; &quot;(sandbox.multimethods/calculated-type \&quot;one\&quot;)&quot; &quot;(sandbox.multimethods/calculated-type \&quot;two\&quot;)&quot; &quot;(sandbox.multimethods/do-config :one {:foo \&quot;bar\&quot;})&quot; &quot;(defproject sandbox \&quot;0.1.0-SNAPSHOT\&quot;\n  :description \&quot;FIXME: write description\&quot;\n  :url \&quot;http://example.com/FIXME\&quot;\n  :license {:name \&quot;Eclipse Public License\&quot;\n            :url  \&quot;http://www.eclipse.org/legal/epl-v10.html\&quot;}\n  :dependencies [\n                 [org.clojure/clojure \&quot;1.8.0\&quot;]\n                 [prismatic/schema \&quot;1.1.3\&quot;]])&quot; &quot;(s/explain user)&quot; &quot;(s/validate\n  user {:firstName \&quot;Christopher\&quot;\n        :lastName \&quot;Town\&quot;})&quot; &quot;(assoc [1 2 3] 0 10)&quot; &quot;(assoc [1 2 3] 1 10)&quot; &quot;(assoc {} :key1 \&quot;value\&quot; :key2 \&quot;another value\&quot;)&quot; &quot;(assoc test-map :fnam \&quot;Sue\&quot;)&quot; &quot;test-map&quot; &quot;(keyword \&quot;user\&quot; \&quot;foo\&quot;)&quot; &quot;(keyword \&quot;foo\&quot;)&quot; &quot;(clojure-version)&quot; &quot;(alength my-array)&quot; &quot;(require '[crisco.data :as data])&quot; &quot;(= 1 1)\n  &quot; &quot;(sandbox.functions.multimethods/dobasic )&quot; &quot;(def basic-type #{:one/foo :two/foo})&quot; &quot;(in-ns sandbox.functions.multimethods)&quot; &quot;(sandbox.functions.multimethods/do-basic basic-type :one)&quot; &quot;(sandbox.functions.multimethods/do-basic {:one})&quot; &quot;(sandbox.functions.multimethods/do-basic #{:one})&quot; &quot;({:one :two } :two)&quot; &quot;({:one :two } :one)&quot; &quot;(def basic-type (:one :two))&quot; &quot;(def basic-type {:one :two})&quot; &quot;(ns sandbox.functions.multimethods)&quot; &quot;(sandbox.functions.multimethods/do-config :one)&quot; &quot;(sandbox.functions.multimethods/do-config :one {})&quot; &quot;(sandbox.functions.multimethods/do-config two {})&quot; &quot;(sandbox.functions.multimethods/do-config :two {})&quot; &quot;(sandbox.functions.multimethods/do-config :two)&quot; &quot;(def basic-type #{:one :two})&quot; &quot;(defmulti do-basic basic-type)&quot; &quot;(defmethod do-basic :two\n  [keyword]\n  (println [\&quot;two\&quot;]))&quot; &quot;(:use 'clojure.test)&quot; &quot;(testing \&quot;Basic Multimethod\&quot;\n    (is (= :one (sandbox.functions.multimethods/do-basic :one))))&quot; &quot;(sandbox.functions.multimethods/do-basic :one)&quot; &quot;(sandbox.functions.multimethods/do-basic :two)&quot; &quot;(defmethod do-basic :one\n  [keyword]\n  (true))&quot; &quot;(test/testing \&quot;Basic Multimethod\&quot;\n    (test/is (= \&quot;one\&quot; (sandbox.functions.multimethods/do-basic :one))))&quot; &quot;(do-basic :one)&quot; &quot;(test/testing \&quot;config multimethod\&quot;\n  (test/is (= \&quot;one\&quot; (do-config :one config-type))))&quot; &quot;(def config-type [1])&quot; &quot;(test/testing \&quot;config multimethod\&quot;\n  (test/is (= \&quot;one\&quot; (first (do-config :one config-type)))))&quot; &quot;(defmethod do-config :one\n  [basic-type config]\n  (-&gt;&gt; config))&quot; &quot;(defmethod do-config :two\n  [basic-type config]\n  (-&gt;&gt; config))&quot; &quot;(def config-type #{:a :b})&quot; &quot;(defmulti do-config basic-type)&quot; &quot;(defmethod do-config :one\n  [basic-type config]\n  (print config))&quot; &quot;(defmethod do-config :two\n  [basic-type config]\n  (print config))&quot; &quot;(test/testing \&quot;config multimethod\&quot;\n  (test/is (= \&quot;one\&quot; (do-config :one :ffobat))))&quot; &quot;(do-config config :one)&quot; &quot;(do-config :one)&quot; &quot;(do-config :one config)&quot; &quot;(do-config \&quot;one\&quot;)&quot; &quot;(test/testing \&quot;config multimethod\&quot;\n  (test/is (= \&quot;one\&quot; (do-config \&quot;one\&quot;))))&quot; &quot;(test/testing \&quot;config multimethod\&quot;\n  (test/is (= \&quot;one\&quot; (do-config \&quot;one\&quot; 1))))&quot; &quot;(defmulti do-config\n  (fn [keyword config]\n    (cond\n      (= keyword \&quot;one\&quot;) :one\n      (= keyword \&quot;two\&quot;) :two)))&quot; &quot;(def overload-type\n  (fn [keyword config]\n    (cond\n      (= keyword \&quot;one\&quot;) :one\n      (= keyword \&quot;two\&quot;) :two)))&quot; &quot;(def overload-type-fn\n  (fn [keyword config]\n    (cond\n      (= keyword \&quot;one\&quot;) :one\n      (= keyword \&quot;two\&quot;) :two)))&quot; &quot;(defmulti do-overload overload-type-fn)&quot;], :remote []}}</component>
</project>